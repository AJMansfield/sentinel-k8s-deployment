apiVersion: v1
kind: Namespace
metadata:
  name: cattle-system
  labels:
    name: cattle-system
---
# Source: rancher/templates/serviceAccount.yaml
kind: ServiceAccount
apiVersion: v1
metadata:
  name: rancher
  namespace: cattle-system
  labels:
    app: rancher
    chart: rancher-2.7.1
    heritage: Helm
    release: rancher
---
# Source: rancher/templates/configMap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: rancher-config
  namespace: cattle-system
  labels: 
    app: rancher
    chart: rancher-2.7.1
    heritage: Helm
    release: rancher
data:
  priorityClassName:  rancher-critical
---
# Source: rancher/templates/clusterRoleBinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: rancher
  namespace: cattle-system
  labels:
    app: rancher
    chart: rancher-2.7.1
    heritage: Helm
    release: rancher
subjects:
- kind: ServiceAccount
  name: rancher
  namespace: cattle-system
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io
---
# Source: rancher/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: rancher
  namespace: cattle-system
  labels:
    app: rancher
    chart: rancher-2.7.1
    heritage: Helm
    release: rancher
spec:
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
  - port: 443
    targetPort: 444
    protocol: TCP
    name: https-internal
  selector:
    app: rancher
---
# Source: rancher/templates/deployment.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: rancher
  namespace: cattle-system
  annotations:
  labels:
    app: rancher
    chart: rancher-2.7.1
    heritage: Helm
    release: rancher
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rancher
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: rancher
        release: rancher
    spec:
      priorityClassName: rancher-critical
      serviceAccountName: rancher
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - rancher
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms: 
              - matchExpressions:
                - key: kubernetes.io/os
                  operator: NotIn
                  values:
                  - windows
      tolerations: 
        - key: "cattle.io/os"
          value: "linux"
          effect: "NoSchedule"
          operator: "Equal"
      containers:
      - image: rancher/rancher:v2.7.1
        imagePullPolicy: IfNotPresent
        name: rancher
        ports:
        - containerPort: 80
          protocol: TCP
        args:
        # Rancher self-signed - don't clear ca certs
        - "--http-listen-port=80"
        - "--https-listen-port=443"
        - "--add-local=true"
        env:
        - name: CATTLE_NAMESPACE
          value: cattle-system
        - name: CATTLE_PEER_SERVICE
          value: rancher
        - name: CATTLE_BOOTSTRAP_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "bootstrap-secret"
              key: "bootstrapPassword"
        livenessProbe:
          httpGet:
            path: /healthz
            port: 80
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /healthz
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 30
        resources:
          {}
        volumeMounts:
      volumes:
---
# Source: rancher/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: rancher
  namespace: cattle-system
  labels:
    app: rancher
    chart: rancher-2.7.1
    heritage: Helm
    release: rancher
  annotations:
    cert-manager.io/issuer: rancher
    cert-manager.io/issuer-kind: Issuer
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "1800"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "1800"
spec:
  rules:
  - host: rancher.dutnet.local  # hostname to access rancher server
    http:
      paths:
      - backend:
          service:
            name: rancher
            port:
              number: 80
        pathType: ImplementationSpecific
  tls:
  - hosts:
    - rancher.dutnet.local
    secretName: tls-rancher-ingress
---
# Source: rancher/templates/issuer-rancher.yaml
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: rancher
  namespace: cattle-system
  labels:
    app: rancher
    chart: rancher-2.7.1
    heritage: Helm
    release: rancher
spec:
  ca:
    secretName: tls-rancher
---
# Source: rancher/templates/priorityClass.yaml
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: rancher-critical
  namespace: cattle-system
  labels: 
    app: rancher
    chart: rancher-2.7.1
    heritage: Helm
    release: rancher
value: 1000000000
globalDefault: false
description: "Priority class used by pods critical to rancher's functionality."
---
# Source: rancher/templates/post-delete-hook-psp.yaml
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: rancher-post-delete
  namespace: cattle-system
  labels: 
    app: rancher
    chart: rancher-2.7.1
    heritage: Helm
    release: rancher
  annotations:
    "helm.sh/hook": post-delete
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded,hook-failed
spec:
  privileged: false
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: 'RunAsAny'
  seLinux:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
      - min: 1
        max: 65535
  fsGroup:
    rule: 'MustRunAs'
    ranges:
      - min: 1
        max: 65535
  readOnlyRootFilesystem: false
  volumes:
    - 'secret'
    - 'configMap'
---
# Source: rancher/templates/post-delete-hook-service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: rancher-post-delete
  namespace: cattle-system
  labels: 
    app: rancher
    chart: rancher-2.7.1
    heritage: Helm
    release: rancher
  annotations:
    "helm.sh/hook": post-delete
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded,hook-failed
---
# Source: rancher/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "bootstrap-secret"
  namespace: cattle-system
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/resource-policy": keep
type: Opaque
data:
  bootstrapPassword: "YWRtaW4=" # =base64("admin")
---
# Source: rancher/templates/post-delete-hook-config-map.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: rancher-post-delete
  namespace: cattle-system
  labels: 
    app: rancher
    chart: rancher-2.7.1
    heritage: Helm
    release: rancher
  annotations:
    "helm.sh/hook": post-delete
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded,hook-failed
data:
  post-delete-hook.sh: |-
    #!/bin/bash
    
    set -e
    
    namespaces="${NAMESPACES}"
    rancher_namespace="${RANCHER_NAMESPACE}"
    timeout="${TIMEOUT}"
    ignoreTimeoutError="${IGNORETIMEOUTERROR}"
    
    if [[ -z ${namespaces} ]]; then
      echo "No namespace is provided."
      exit 1
    fi
    
    if [[ -z ${rancher_namespace} ]]; then
      echo "No rancher namespace is provided."
      exit 1
    fi
    
    if [[ -z ${timeout} ]]; then
      echo "No timeout value is provided."
      exit 1
    fi
    
    if [[ -z ${ignoreTimeoutError} ]]; then
      echo "No ignoreTimeoutError value is provided."
      exit 1
    fi
    
    succeeded=()
    failed=()
    
    get_pod_count() {
      kubectl get pods --selector app="${1}" -n "${2}" -o json | jq '.items | length'
    }
    
    echo "Uninstalling Rancher resources in the following namespaces: ${namespaces}"
    
    for namespace in ${namespaces}; do
      for app in $(helm list -n "${namespace}" -q); do
        if [[ ${app} =~ .crd$ ]]; then
          echo "--- Skip the app [${app}] in the namespace [${namespace}]"
          continue
        fi
        echo "--- Deleting the app [${app}] in the namespace [${namespace}]"
        if [[ ! $(helm uninstall "${app}" -n "${namespace}") ]]; then
          failed=("${failed[@]}" "${app}")
          continue
        fi
    
        t=0
        while true; do
          if [[ $(get_pod_count "${app}" "${namespace}") -eq 0 ]]; then
            echo "successfully uninstalled [${app}] in the namespace [${namespace}]"
            succeeded=("${succeeded[@]}" "${app}")
            break
          fi
          if [[ ${t} -ge ${timeout} ]]; then
            echo "timeout uninstalling [${app}] in the namespace [${namespace}]"
            failed=("${failed[@]}" "${app}")
            break
          fi
          # by default, wait 120 seconds in total for an app to be uninstalled
          echo "waiting 5 seconds for pods of [${app}] to be terminated ..."
          sleep 5
          t=$((t + 5))
        done
      done
    
      # delete the helm operator pods
      for pod in $(kubectl get pods -n "${namespace}" -o name); do
        if [[ ${pod} =~ ^pod\/helm-operation-* ]]; then
          echo "--- Deleting the pod [${pod}] in the namespace [${namespace}]"
          kubectl delete "${pod}" -n "${namespace}"
        fi
      done
    done
    
    echo "Removing Rancher bootstrap secret in the following namespace: ${rancher_namespace}"
    kubectl --ignore-not-found=true delete secret bootstrap-secret -n "${rancher_namespace}"
    
    echo "------ Summary ------"
    if [[ ${#succeeded[@]} -ne 0 ]]; then
      echo "Succeeded to uninstall the following apps:" "${succeeded[@]}"
    fi
    
    if [[ ${#failed[@]} -ne 0 ]]; then
      echo "Failed to uninstall the following apps:" "${failed[@]}"
      if [[ "${ignoreTimeoutError}" == "false" ]]; then
        exit 2
      fi
    else
      echo "Cleanup finished successfully."
    fi
---
# Source: rancher/templates/post-delete-hook-cluster-role.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: rancher-post-delete
  namespace: cattle-system
  labels: 
    app: rancher
    chart: rancher-2.7.1
    heritage: Helm
    release: rancher
  annotations:
    "helm.sh/hook": post-delete
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded,hook-failed
rules:
  - apiGroups: [ "extensions","apps" ]
    resources: [ "deployments" ]
    verbs: [ "get", "list", "delete" ]
  - apiGroups: [ "batch" ]
    resources: [ "jobs" ]
    verbs: [ "get", "list", "watch", "delete", "create" ]
  - apiGroups: [ "rbac.authorization.k8s.io" ]
    resources: [ "clusterroles", "clusterrolebindings", "roles", "rolebindings" ]
    verbs: [ "get", "list", "delete", "create" ]
  - apiGroups: [ "" ]
    resources: [ "pods", "secrets", "services", "configmaps" ]
    verbs: [ "get", "list", "delete" ]
  - apiGroups: [ "" ]
    resources: [ "serviceaccounts" ]
    verbs: [ "get", "list", "delete", "create" ]
  - apiGroups: [ "networking.k8s.io" ]
    resources: [ "networkpolicies" ]
    verbs: [ "get", "list", "delete" ]
  - apiGroups: [ "admissionregistration.k8s.io" ]
    resources: [ "validatingwebhookconfigurations", "mutatingwebhookconfigurations" ]
    verbs: [ "get", "list", "delete" ]
  - apiGroups: [ "policy" ]
    resources: [ "podsecuritypolicies" ]
    verbs: [ "use", "delete", "create" ]
  - apiGroups: [ "networking.k8s.io" ]
    resources: [ "ingresses" ]
    verbs: [ "delete" ]
  - apiGroups: [ "cert-manager.io" ]
    resources: [ "issuers" ]
    verbs: [ "delete" ]
---
# Source: rancher/templates/post-delete-hook-cluster-role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: rancher-post-delete
  namespace: cattle-system
  labels: 
    app: rancher
    chart: rancher-2.7.1
    heritage: Helm
    release: rancher
  annotations:
    "helm.sh/hook": post-delete
    "helm.sh/hook-weight": "2"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded,hook-failed
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: rancher-post-delete
subjects:
  - kind: ServiceAccount
    name: rancher-post-delete
    namespace: cattle-system
---
# Source: rancher/templates/post-delete-hook-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: rancher-post-delete
  namespace: cattle-system
  labels: 
    app: rancher
    chart: rancher-2.7.1
    heritage: Helm
    release: rancher
  annotations:
    "helm.sh/hook": post-delete
    "helm.sh/hook-weight": "3"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  backoffLimit: 3
  template:
    metadata:
      name: rancher-post-delete
      labels: 
        app: rancher
        chart: rancher-2.7.1
        heritage: Helm
        release: rancher
    spec:
      serviceAccountName: rancher-post-delete
      restartPolicy: OnFailure
      containers:
        - name: rancher-post-delete
          image: "rancher/shell:v0.1.18"
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 0
          command:
            - /scripts/post-delete-hook.sh
          volumeMounts:
            - mountPath: /scripts
              name: config-volume
          env:
            - name: NAMESPACES
              value: "cattle-fleet-system cattle-system rancher-operator-system"
            - name: RANCHER_NAMESPACE
              value: cattle-system
            - name: TIMEOUT
              value: "120"
            - name: IGNORETIMEOUTERROR
              value: "false"
      volumes:
        - name: config-volume
          configMap:
            name: rancher-post-delete
            defaultMode: 0777
